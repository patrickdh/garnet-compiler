%  PT Parser.ssl	v1.01
%
% Date:  30 Jun 1980
%	 (revised 7 December 2009)
%%%%%%%%%%% ADDED 
%	 (revised 3 Feb 2017 for Garnet) 
%%%%%%%%%%% 
%
% Author:  Alan Rosselet
%
% Abstract
%
%     This module parses the syntax token stream emitted by the scanner
%   and emits a postfix stream of tokens to the semantic analyzer
%   module.  The parser detects and repairs syntax errors so that the
%   token stream emitted to the semantic analyzer is syntactically
%   legal (except for the special case of declaration phase errors - see
%   comment in the Block routine below).

Input :
	% Keywords must be first both here and in stdIdentifiers,
	% and they must appear in the same order

	pDiv			'div'
	firstKeywordToken = pDiv
	pMod			'mod'
	pOr			'or'
	pAnd			'and'
%%%%%%%%%%% DELETED
%	pNot			'not'
%%%%%%%%%%% 
	pThen			'then'
	pElse			'else'
	pOf			'of'
	pEnd			'end'
%%%%%%%%%%% DELETED
%	pUntil			'until'
%%%%%%%%%%% 
	pDo			'do'
	pArray			'array'
	pFile			'file'
	pPacked			'packed'
%%%%%%%%%%% CHANGED
%       pProgram		'program'
%       pConst			'const'
%%%%%%%%%%% 
	pUsing			'using'
	pVal			'val'
%%%%%%%%%%% 
	pVar			'var'
	pType			'type'
%%%%%%%%%%% CHANGED
%       pProcedure		'procedure'
%%%%%%%%%%% 
	pDef			'def'
%%%%%%%%%%% 
%%%%%%%%%%% DELETED
%	pBegin			'begin'
%%%%%%%%%%%
	pIf			'if'
%%%%%%%%%%% ADDED
	pUnless			'unless'
%%%%%%%%%%% 
	pCase			'case'
	pWhile			'while'
%%%%%%%%%%% CHANGED
%       pRepeat			'repeat'
%%%%%%%%%%% 
	pElsif			'elsif'
	pBreak			'break'
	pWhen			'when'
	pModule			'module'
%%%%%%%%%%% 
%%%%%%%%%%% ADDED 858
	pReturn			'return'
%%%%%%%%%%% 
%%%%%%%%%%% CHANGED 458
%	lastKeywordToken = pRepeat
%%%%%%%%%%% CHANGED 858
%	lastKeywordToken = pModule
%%%%%%%%%%% 
	lastKeywordToken = pReturn
%%%%%%%%%%% 

	pIdentifier 
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	pNewLine
	pEndFile
	pPlus			'+'
	pMinus			'-'
	pStar			'*'
%%%%%%%%%%% DELETED
%       pColonEquals		':='
%%%%%%%%%%%
	pDot			'.'
	pComma			','
	pSemicolon		';'
%%%%%%%%%%% ADDED
	pEqualsEquals		'=='
	pNot			'!'
	pQuestion		'?'
	pDollar			'$'
	pHash			'#'
%%%%%%%%%%% 
	pColon			':'
	pEquals			'='
	pNotEqual		'!='
	pLess			'<'
	pLessEqual		'<='
	pGreaterEqual		'>='
	pGreater		'>'
	pLeftParen		'('
	pRightParen		')'
	pLeftBracket		'['
	pRightBracket		']'
	pDotDot			'..'
	lastSyntaxToken = pDotDot;


Output :
	sIdentifier 
	firstSemanticToken = sIdentifier
	firstCompoundSemanticToken = sIdentifier
	sInteger
	sLiteral
	lastCompoundSemanticToken = sLiteral

	sProgram
	sParmBegin
	sParmEnd
	sConst
	sType
	sVar
	sProcedure
%%%%%%%%%%% ADDED 
	sPublic
%%%%%%%%%%% 
	sBegin
	sEnd
	sNegate
	sArray
	sPacked
	sFile
	sRange
	sCaseStmt
	sCaseEnd
	sLabelEnd
	sExpnEnd
	sNullStmt
	sAssignmentStmt
	sSubscript
	sCallStmt
	sFieldWidth
	sIfStmt
	sThen
	sElse
	sWhileStmt
%%%%%%%%%%% CHANGED
%	sRepeatStmt
%	sRepeatEnd
%%%%%%%%%%% 
	sModule
	sDoStmt
	sBreakIf
%%%%%%%%%%% 
%%%%%%%%%%% ADDED 858 
	sReturn
%%%%%%%%%%% 
	sEq
	sNE
	sLT
	sLE
	sGT
	sGE
	sAdd
	sSubtract
	sMultiply
	sDivide
	sModulus
	sInfixOr
	sOr
	sInfixAnd
	sAnd
	sNot
%%%%%%%%%%% ADDED 
	sSubstring
	sLength
	sIndex
%%%%%%%%%%% 
	sNewLine
	lastSemanticToken = sNewLine;


rules

Program :
%%%%%%%%%%% CHANGED
%	'program'  .sProgram
%	% program name
%	pIdentifier
%%%%%%%%%%% 
	'using' .sProgram
%%%%%%%%%%% 
	% program parameters
%%%%%%%%%%% DELETED
%	'('
%%%%%%%%%%% 
	{
	    pIdentifier  .sIdentifier
	    [
		| ',':
		| *:
		    >
	    ]
	}
%%%%%%%%%%% DELETED
%	')'
%%%%%%%%%%% 
	.sParmEnd
%%%%%%%%%%% CHANGED
%	';'  @Block  '.';
%%%%%%%%%%% 
	@Block;
%%%%%%%%%%% 

%%%%%%%%%%% CHANGED
% Block :
%	 % Strictly speaking, standard Pascal requires that declarations
%	 % appear only in the order consts, types, vars, procedures.
%	 % We allow arbitrary intermixing of these instead to preserve
%	 % programmer sanity.
%	 {[
%	     | 'const':
%		 .sConst
%		 @ConstantDefinitions
%	     | 'type':
%		 .sType
%		 @TypeDefinitions
%	     | 'var':
%		 .sVar
%		 @VariableDeclarations
%	     | 'procedure':
%		 .sProcedure
%		 % procedure name
%		 pIdentifier  .sIdentifier
%		 @ProcedureHeading
%		 @Block  ';'
%	     | *:
%		 >
%	 ]}
%	 'begin'
%	 @BeginStmt;
%%%%%%%%%%% 
Block :
	@Declarations
	@Statements;

Declarations:
	% Strictly speaking, standard Pascal requires that declarations
	% appear only in the order consts, types, vars, procedures.
	% We allow arbitrary intermixing of these instead to preserve
	% programmer sanity.
	{[
	    | 'val':
		.sConst
		@ConstantDefinition
	    | 'type':
		.sType
		@TypeDefinition
	    | 'var':
		.sVar
		@VariableDeclarations
	    | 'def':
		.sProcedure
		[
		    | '*':
			pIdentifier  .sIdentifier 
			.sPublic
		    | *:
			pIdentifier  .sIdentifier 
		]
		@ProcedureHeading
%%%%%%%%%%% CHANGED 858
%		@Block
%%%%%%%%%%% 
		[
		    | ':':
			pIdentifier .sIdentifier
			@Block  
		        'return' .sReturn @Expression .sExpnEnd  
		    | *:
			@Block  
		]
%%%%%%%%%%% END 858 
		'end'
	    | 'module':
		.sModule
		pIdentifier .sIdentifier 
		@Block
		'end'
	    | ';':
		% null declaration, does nothing
	    | *:
		>
	]};
%%%%%%%%%%% 

%%%%%%%%%%% CHANGED
% ConstantDefinitions :
%	% Accept one or more named constant definitions
%	pIdentifier  .sIdentifier
%	@ConstantValue
%	{[
%	    | pIdentifier:
%		.sIdentifier
%		@ConstantValue
%	    | *:
%		>
%	]};
%%%%%%%%%%% 
ConstantDefinition :
	% Accept a named constant
	pIdentifier  .sIdentifier
	@ConstantValue;
%%%%%%%%%%% 

ConstantValue :
	'='
	[
	    | pInteger:
		.sInteger
	    | pIdentifier:
		.sIdentifier
	    | '-':
		@UnsignedIntegerConstant
		.sNegate
	    | '+':
		@UnsignedIntegerConstant
	    | pLiteral:
		.sLiteral
	]
%%%%%%%%%%% CHANGED 
%	';' ;
%%%%%%%%%%% 
	;
%%%%%%%%%%% 

UnsignedIntegerConstant :
	[
	    | pIdentifier:
		.sIdentifier
	    | pInteger:
		.sInteger
	];

%%%%%%%%%%% CHANGED
% TypeDefinitions :
% 	% Accept one or more named type definitions.
%	pIdentifier  .sIdentifier
%	'='  @TypeBody  ';'
%	{[
%	    | pIdentifier:
%		.sIdentifier
%		'='  @TypeBody  ';'
%	    | *:
%		>
%	]};
%%%%%%%%%%% 
TypeDefinition :
	% Accept a named type definiion
	pIdentifier  .sIdentifier
	':' @TypeBody;
%%%%%%%%%%% 

TypeBody :
	[
	    | 'packed':
		'array'  .sArray  .sPacked
		'['  @SimpleType  ']'
		'of'  @SimpleType
	    | 'array':
		.sArray
		'['  @SimpleType  ']'
		'of'  @SimpleType
	    | 'file':
		.sFile
		'of'  @SimpleType
	    | *:
		@SimpleType
	];

SimpleType :
	% A simple type is a named type (possibly predefined)
	% or a subrange type specification
	[
	    | pIdentifier:
		.sIdentifier
		[
		    | '..':
			.sRange		%% this may be unnecessary
			@OptionallySignedIntegerConstant
		    | *:
		]
	    | *:
		@OptionallySignedIntegerConstant
		'..'  .sRange
		@OptionallySignedIntegerConstant
	];

OptionallySignedIntegerConstant :
	[
	    | '-':
		@UnsignedIntegerConstant
		.sNegate
	    | '+':
		@UnsignedIntegerConstant
	    | *:
		@UnsignedIntegerConstant
	];

%%%%%%%%%%% CHANGED
% VariableDeclarations :
%	% Accept one or more variable declarations.
%	pIdentifier  .sIdentifier
%	':'  @TypeBody  ';'
%	{[
%	    | pIdentifier:
%		.sIdentifier
%		':'  @TypeBody  ';'
%	    | *:
%		>
%	]};
%%%%%%%%%%% 
VariableDeclarations :
	% Accept one or more variable declarations.
	pIdentifier  .sIdentifier
	{[
	    | ',':
		pIdentifier .sVar .sIdentifier
	    | *:
		>
	]}
	':' @TypeBody;
%%%%%%%%%%% 

ProcedureHeading :
	% Accept zero or more procedure formal parameter declarations.
%%%%%%%%%%% CHANGED
%	[
%	    | '(':
%%%%%%%%%%% 
	'('
%%%%%%%%%%% 
	[
	    | ')':
	    | *:
		{
		    % formal parameter identifier
		    [
			| 'var':
			    pIdentifier  .sIdentifier
			    .sVar
			| *:
			    pIdentifier  .sIdentifier
		    ]
		    ':'
		    % type identifier
		    pIdentifier  .sIdentifier
		    [
%%%%%%%%%%% CHANGED
%		       | ';':
%%%%%%%%%%% 
			| ',':
%%%%%%%%%%% 
			| *:
			    >
		    ]
		}
		')'
%%%%%%%%%%% DELETED
%	    | *:
%%%%%%%%%%% 
	]
%%%%%%%%%%% DELETED
%       ';'
%%%%%%%%%%% 
	.sParmEnd;

% Statement :
%	[
%	    | pIdentifier:
%		@AssignmentOrCallStmt
%	    | 'begin':
%		@BeginStmt
%	    | 'if':
%		@IfStmt
%	    | 'while':
%		@WhileStmt
%	    | 'case':
%		@CaseStmt
%	    | 'repeat':
%		@RepeatStmt
%	    | *:
%		.sNullStmt
%	];
%%%%%%%%%%% 
Statements :
	.sBegin
	{[
	    | pIdentifier:
		@AssignmentOrCallStmt 
	    | 'if':
		@IfStmt
	    | 'unless':
		@UnlessStmt
	    | 'case':
		@CaseStmt
	    | 'while':
		 @WhileStmt
	    | 'do':
		@DoStmt
	    | ';':
		% null statement, does nothing
	    | *:
		>
	]}
	.sEnd;
%%%%%%%%%%% 

AssignmentOrCallStmt :
	[
%%%%%%%%%%% CHANGED 
%	    | ':=':
%%%%%%%%%%% 
	    | '=':
%%%%%%%%%%% 
		.sAssignmentStmt
		.sIdentifier	% identifier accepted in the Statement rule
		@Expression
		.sExpnEnd
	    | '[':
		.sAssignmentStmt
		.sIdentifier
		.sSubscript
		@Expression
		.sExpnEnd
%%%%%%%%%%% CHANGED 
%		']'  ':='
%%%%%%%%%%%
		']'  '='
%%%%%%%%%%%
		@Expression
		.sExpnEnd
	    | *:
		@CallStmt
	];

CallStmt :
	.sCallStmt
	.sIdentifier	% procedure identifier accepted in the Statement rule
	% accept zero or more actual parameters
%%%%%%%%%%% CHANGED 
%	[
%	    | '(':
%%%%%%%%%%% 
	'('
	[
	    | ')':
	    | *:
%%%%%%%%%%% 
		{
		    @Expression
		    .sExpnEnd
		    % allow a field width specification to occur in calls
		    % to the standard procedures write and writeln
		    [
			| ':':
			    .sFieldWidth
			    @Expression
			    .sExpnEnd
			| *:
		    ]
		    [
			| ',':
			| *:
			    >
		    ]
		}
		')'
%%%%%%%%%%% CHANGED 
%	   | *:	% no actual parameters
%       ]
%%%%%%%%%%% 
	]
%%%%%%%%%%% 
	.sParmEnd;

%%%%%%%%%%% DELETED
% BeginStmt :
%	.sBegin
%	{
%	    @Statement
%	    [
%		| ';':
%		| 'end':
%		    .sEnd
%		    >
%	    ]
%	};
%%%%%%%%%%% 

%%%%%%%%%%% CHANGED
% IfStmt :
%	.sIfStmt
%	@Expression 
%	.sExpnEnd
%	'then'  .sThen
%	@Statement
%	[
%	    | 'else':
%		.sElse
%		@Statement
%	    | *:
%	];
%%%%%%%%%%% 
IfStmt :
	.sIfStmt
	@Expression
	.sExpnEnd
	'then'  .sThen
	@Statements
	[
	    | 'elsif':
		.sElse
		@IfStmt    % no 'end' in this case!
	    | 'else':
		.sElse
		@Statements
		'end'
	    | *:
		'end'
	];
%%%%%%%%%%% 

%%%%%%%%%%% ADDED 
UnlessStmt :
	.sIfStmt
	@Expression 
	.sNot		% fool semantic phase into thinking it's a normal if
	.sExpnEnd
	'then'  .sThen
	@Statements
	[
	    | 'else':
		.sElse
		@Statements
	    | *:
	]
	'end';
%%%%%%%%%%% 

%%%%%%%%%%% CHANGED
% CaseStmt :
%	.sCaseStmt
%	@Expression
%	.sExpnEnd
%	'of'
%	{[
%	     | ';':
%		 % since case alternatives cannot be null, allow
%		 % for the common situation of an extra semicolon
%		 % at the end of the list of case alternatives.
%		 [
%		     | 'end':
%			 >
%		     | *:
%			 @CaseAlternative
%		 ]
%	    | 'end':
%		>
%	    | 'when':
%		@CaseAlternative
%	    | *:
%		>
%	]}
%	.sCaseEnd;
%%%%%%%%%%% 
CaseStmt :
	.sCaseStmt
	@Expression
	.sExpnEnd
	{[
	    | 'when':
		@CaseAlternative
	    | *:
		>
	]}
	[
	    | 'else' :
		.sElse
		@Statements
	    | *:
	]
	'end' 
	.sCaseEnd;
%%%%%%%%%%% 

CaseAlternative :
	% A case alternative is a statement labelled by
	% one or more optionally signed integer constants

	{
	    @OptionallySignedIntegerConstant
	    [
		| ',':
		| *:
		    >
	    ]
	}
	.sLabelEnd
%%%%%%%%%%% CHANGED
%       ':'  @Statement;
%%%%%%%%%%% 
	'then'
	@Statements;
%%%%%%%%%%% 

WhileStmt :
	.sWhileStmt
	@Expression
	.sExpnEnd
	'do'
%%%%%%%%%%% CHANGED
%	@Statement;
%%%%%%%%%%% 
	@Statements
	'end';
%%%%%%%%%%% 

%%%%%%%%%%% CHANGED
% RepeatStmt :
%	.sRepeatStmt
%	{
%	    @Statement
%	    [
%		| ';':
%		| 'until':
%		    .sRepeatEnd
%		    >
%	    ]
%	}
%	.sExpnEnd;
%%%%%%%%%%% 
DoStmt :
	.sDoStmt
	@Statements
	'break' 'if' .sBreakIf @Expression .sExpnEnd 
	@Statements
	'end'; 
%%%%%%%%%%% 

Expression :
	@SimpleExpression
	[
%%%%%%%%%%% CHANGED 
%	    | '=':
%		@SimpleExpression  .sEq
%	    | '<>':
%		@SimpleExpression  .sNE
%%%%%%%%%%%
	    | '==':
		@SimpleExpression  .sEq
	    | '!=':
		@SimpleExpression  .sNE
%%%%%%%%%%%
	    | '<':
		@SimpleExpression  .sLT
	    | '<=':
		@SimpleExpression  .sLE
	    | '>':
		@SimpleExpression  .sGT
	    | '>=':
		@SimpleExpression  .sGE
	    | *:
	];

SimpleExpression :
	[
	    | '+':
		@Term
	    | '-':
		@Term  .sNegate
	    | *:
		@Term
	]
	{[
	    | '+':
		@Term  .sAdd
	    | '-':
		@Term  .sSubtract
	    | 'or':
		.sInfixOr  @Term  .sOr
	    | *:
		>
	]};

Term :
	@Factor
	{[
	    | '*':
		@Factor  .sMultiply
	    | 'div':
		@Factor  .sDivide
	    | 'mod':
		@Factor  .sModulus
	    | 'and':
		.sInfixAnd  @Factor  .sAnd
%%%%%%%%%%% ADDED
	    | '?':
		@Factor	 .sIndex
%%%%%%%%%%% 

	    | *:
		>
	]};

%%%%%%%%%%% CHANGED
% Factor :
%%%%%%%%%%% 
Factor :
	@SubFactor
	{[
	    | '$':
		@SubFactor '..' @Subfactor .sSubstring
	    | *:
		>
	]};

SubFactor :
%%%%%%%%%%% 
	[
	    | pIdentifier:
		.sIdentifier
		@IdentifierExtension
	    | pInteger:
		.sInteger
	    | '(':
		@Expression  ')'
	    | '!':
%%%%%%%%%%% CHANGED
%		@Factor
%%%%%%%%%%% 
		@SubFactor
%%%%%%%%%%% 
		.sNot
%%%%%%%%%%% ADDED
	    | '#':
		@SubFactor
		.sLength
%%%%%%%%%%% 
	    | pLiteral:
		.sLiteral
	    | 'file':
		.sFile '(' @Expression ')'
		.sExpnEnd
	];

IdentifierExtension :
	% Handle subscripts and function actual parameter lists
	[
	    | '[':
		.sSubscript
		@Expression  ']'
		.sExpnEnd
%%%%%%%%%%% CHANGED 858
%	    | '(':
%		.sParmBegin
%		@Expression  ')'
%		.sExpnEnd
%		.sParmEnd
%%%%%%%%%%% 
	    | '(':
		[
		    | ')':
		    | *:
			.sParmBegin
			{
			    @Expression
			    .sExpnEnd
			    [
				| ',':
				| *:
				    >
			    ]
			}
			')'
			.sParmEnd
		]
%%%%%%%%%%% END 858
	    | *:
	];

end
