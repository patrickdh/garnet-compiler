make: Entering directory `/cas/student/cisc458n/cisc458/phase4/coderlinux'
/bin/cp coder.out coder.sst coder.def ../lib/pt
make: Leaving directory `/cas/student/cisc458n/cisc458/phase4/coderlinux'
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tLiteralInteger)
  | tLiteralInteger:
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  oEmitDouble(iMov)
  [ (tFileDescriptor)
  | tFileDescriptor:
  ] or >
  oOperandPop
  oOperandPop
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralString)
    | *:
    [ (tLiteralString)
    | *:
    [ (tLiteralString)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralString)
    | tLiteralString:
    oEmitNone(iData)
    oEmitString
    oEmitNone(iText)
    oOperandPushString
    @EmitStringDescriptor
     @OperandForceAddressIntoTemp
      [ oOperandChooseMode (mString)
      | mString:
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      oEmitDouble(iLoada)
      oOperandPop
      ] or >
      oOperandSetLength(two)
      >>
     ;OperandForceAddressIntoTemp
     >>
    ;EmitStringDescriptor
    ] or >
    }
    [ (tAssignString)
    | tAssignString:
    @OperandAssignStringPopPop
     @SaveTempRegsToStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(one)
      oEmitSingle(iPush)
      oOperandSetRegnum(two)
      oEmitSingle(iPush)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPush)
      oOperandSetRegnum(four)
      oEmitSingle(iPush)
      oOperandPop
      >>
     ;SaveTempRegsToStack
     @OperandPushTempWord
      oTempAllocate
      oOperandPushTemp
      oOperandSetValue(zero)
      oOperandSetLength(two)
      >>
     ;OperandPushTempWord
     oOperandSwap
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oEmitDouble(iMov)
     ] or >
     oOperandSwap
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPushTempWord
      oTempAllocate
      oOperandPushTemp
      oOperandSetValue(zero)
      oOperandSetLength(two)
      >>
     ;OperandPushTempWord
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oEmitDouble(iLoada)
     oOperandSwap
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mTrap)
     oOperandSetValue(trAssignString)
     oOperandSetLength(two)
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(eight)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     @RestoreTempRegsFromStack
      oOperandPushMode(mTemp)
      oOperandSetLength(two)
      oOperandSetRegnum(four)
      oEmitSingle(iPop)
      oOperandSetRegnum(regCX)
      oEmitSingle(iPop)
      oOperandSetRegnum(two)
      oEmitSingle(iPop)
      oOperandSetRegnum(one)
      oEmitSingle(iPop)
      oOperandPop
      >>
     ;RestoreTempRegsFromStack
     >>
    ;OperandAssignStringPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tIfBegin)
  | tIfBegin:
  @IfStmt
   oEmitSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tChr)
     | tChr:
     @OperandChr
      @SaveTempRegsToStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(one)
       oEmitSingle(iPush)
       oOperandSetRegnum(two)
       oEmitSingle(iPush)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPush)
       oOperandSetRegnum(four)
       oEmitSingle(iPush)
       oOperandPop
       >>
      ;SaveTempRegsToStack
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mTrap)
      oOperandSetValue(trChrString)
      oOperandSetLength(two)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oOperandPushMode(mScratchReg1)
      oOperandSetLength(two)
      oOperandPushMode(mResultReg)
      oOperandSetLength(two)
      oEmitDouble(iMov)
      oOperandPop
      @RestoreTempRegsFromStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(four)
       oEmitSingle(iPop)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPop)
       oOperandSetRegnum(two)
       oEmitSingle(iPop)
       oOperandSetRegnum(one)
       oEmitSingle(iPop)
       oOperandPop
       >>
      ;RestoreTempRegsFromStack
      @OperandForceIntoTemp
       [ oOperandChooseMode (mScratchReg1)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mScratchReg1)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      >>
     ;OperandChr
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | tFetchString:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tStringEqual)
     | tStringEqual:
     @OperandStringEqualPop
      @SaveTempRegsToStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(one)
       oEmitSingle(iPush)
       oOperandSetRegnum(two)
       oEmitSingle(iPush)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPush)
       oOperandSetRegnum(four)
       oEmitSingle(iPush)
       oOperandPop
       >>
      ;SaveTempRegsToStack
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oEmitDouble(iLoada)
      oOperandSwap
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oEmitDouble(iMov)
      ] or >
      oOperandSwap
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mTrap)
      oOperandSetValue(trStringEqual)
      oOperandSetLength(two)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(eight)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oOperandPushMode(mScratchReg1)
      oOperandSetLength(two)
      oOperandPushMode(mResultReg)
      oOperandSetLength(two)
      oEmitDouble(iMov)
      oOperandPop
      @RestoreTempRegsFromStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(four)
       oEmitSingle(iPop)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPop)
       oOperandSetRegnum(two)
       oEmitSingle(iPop)
       oOperandSetRegnum(one)
       oEmitSingle(iPop)
       oOperandPop
       >>
      ;RestoreTempRegsFromStack
      @OperandForceIntoTemp
       [ oOperandChooseMode (mScratchReg1)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mScratchReg1)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      >>
     ;OperandStringEqualPop
     ] or >
     }
     [ (tIfThen)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (no)
     | *:
     [ oOperandChooseManifestValue ()
     | *:
     @EmitTst
      [ oOperandChooseLength (two)
      | two:
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(two)
      ] or >
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mTemp)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oOperandSwap
        >>yes
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (yes)
       | yes:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      oOperandPop
      >>
     ;EmitTst
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oTempFree
      ] or >
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushJumpCondition(iJne)
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tIfThen (tIfThen)
   [ oOperandChooseJumpCondition (iJne)
   | *:
   oOperandComplementJumpCondition
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJeq)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralString)
       | tLiteralString:
       oEmitNone(iData)
       oEmitString
       oEmitNone(iText)
       oOperandPushString
       @EmitStringDescriptor
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mString)
         | mString:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        >>
       ;EmitStringDescriptor
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      ] or >
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tIfEnd)
    | *:
    ] or >
    >>
   ;Statements
   [ (tIfEnd)
   | tIfEnd:
   oFixAndFreeShuntList
   oOperandPop
   oEmitMergeSourceCoordinate
   ] or >
   >>
  ;IfStmt
  ] or >
  }
  [ (tIfBegin)
  | tIfBegin:
  @IfStmt
   oEmitSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | tFetchString:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tOrd)
     | tOrd:
     @OperandOrd
      @OperandForceAddressIntoTemp
       [ oOperandChooseMode (mStatic)
       | mStatic:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iLoada)
       oOperandPop
       ] or >
       oOperandSetLength(two)
       >>
      ;OperandForceAddressIntoTemp
      oOperandSetMode(mTempIndirect)
      oOperandSetLength(one)
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(two)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mManifest)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      oOperandSetLength(one)
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTempIndirect)
       | mTempIndirect:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetLength(two)
      >>
     ;OperandOrd
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tEQ)
     | tEQ:
     @OperandEqualPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      @OperandAreLeftAndRightManifest
       [ oOperandChooseMode (mStatic)
       | *:
       >>no
      ;OperandAreLeftAndRightManifest
      [@OperandAreLeftAndRightManifest (no)
      | *:
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mTemp)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oOperandSwap
        >>yes
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (yes)
       | yes:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJeq)
      ] or >
      >>
     ;OperandEqualPop
     ] or >
     }
     [ (tIfThen)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tIfThen (tIfThen)
   [ oOperandChooseJumpCondition (iJeq)
   | *:
   oOperandComplementJumpCondition
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJne)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralString)
       | tLiteralString:
       oEmitNone(iData)
       oEmitString
       oEmitNone(iText)
       oOperandPushString
       @EmitStringDescriptor
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mString)
         | mString:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        >>
       ;EmitStringDescriptor
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      ] or >
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tIfEnd)
    | *:
    ] or >
    >>
   ;Statements
   [ (tIfEnd)
   | tIfEnd:
   oFixAndFreeShuntList
   oOperandPop
   oEmitMergeSourceCoordinate
   ] or >
   >>
  ;IfStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tIfBegin)
  | tIfBegin:
  @IfStmt
   oEmitSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tChr)
     | tChr:
     @OperandChr
      @SaveTempRegsToStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(one)
       oEmitSingle(iPush)
       oOperandSetRegnum(two)
       oEmitSingle(iPush)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPush)
       oOperandSetRegnum(four)
       oEmitSingle(iPush)
       oOperandPop
       >>
      ;SaveTempRegsToStack
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mTrap)
      oOperandSetValue(trChrString)
      oOperandSetLength(two)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(four)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oOperandPushMode(mScratchReg1)
      oOperandSetLength(two)
      oOperandPushMode(mResultReg)
      oOperandSetLength(two)
      oEmitDouble(iMov)
      oOperandPop
      @RestoreTempRegsFromStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(four)
       oEmitSingle(iPop)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPop)
       oOperandSetRegnum(two)
       oEmitSingle(iPop)
       oOperandSetRegnum(one)
       oEmitSingle(iPop)
       oOperandPop
       >>
      ;RestoreTempRegsFromStack
      @OperandForceIntoTemp
       [ oOperandChooseMode (mScratchReg1)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mScratchReg1)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      >>
     ;OperandChr
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | tFetchString:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tStringEqual)
     | tStringEqual:
     @OperandStringEqualPop
      @SaveTempRegsToStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(one)
       oEmitSingle(iPush)
       oOperandSetRegnum(two)
       oEmitSingle(iPush)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPush)
       oOperandSetRegnum(four)
       oEmitSingle(iPush)
       oOperandPop
       >>
      ;SaveTempRegsToStack
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      [ oOperandChooseMode (mStatic)
      | *:
      oEmitDouble(iLoada)
      oOperandSwap
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPushTempWord
       oTempAllocate
       oOperandPushTemp
       oOperandSetValue(zero)
       oOperandSetLength(two)
       >>
      ;OperandPushTempWord
      oOperandSwap
      [ oOperandChooseMode (mTemp)
      | mTemp:
      oEmitDouble(iMov)
      ] or >
      oOperandSwap
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mTrap)
      oOperandSetValue(trStringEqual)
      oOperandSetLength(two)
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(eight)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      oOperandPushMode(mScratchReg1)
      oOperandSetLength(two)
      oOperandPushMode(mResultReg)
      oOperandSetLength(two)
      oEmitDouble(iMov)
      oOperandPop
      @RestoreTempRegsFromStack
       oOperandPushMode(mTemp)
       oOperandSetLength(two)
       oOperandSetRegnum(four)
       oEmitSingle(iPop)
       oOperandSetRegnum(regCX)
       oEmitSingle(iPop)
       oOperandSetRegnum(two)
       oEmitSingle(iPop)
       oOperandSetRegnum(one)
       oEmitSingle(iPop)
       oOperandPop
       >>
      ;RestoreTempRegsFromStack
      @OperandForceIntoTemp
       [ oOperandChooseMode (mScratchReg1)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mScratchReg1)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      >>
     ;OperandStringEqualPop
     ] or >
     }
     [ (tNot)
     | tNot:
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (no)
       | *:
       [ oOperandChooseManifestValue ()
       | *:
       @EmitTst
        [ oOperandChooseLength (two)
        | two:
        oOperandPushMode(mManifest)
        oOperandSetValue(zero)
        oOperandSetLength(two)
        ] or >
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mTemp)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oOperandSwap
          >>yes
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (yes)
         | yes:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        oOperandPop
        >>
       ;EmitTst
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushJumpCondition(iJne)
       >>
      ;OperandForceToJumpCondition
      oOperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tIfThen)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tIfThen (tIfThen)
   [ oOperandChooseJumpCondition (iJeq)
   | *:
   oOperandComplementJumpCondition
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJne)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralString)
       | tLiteralString:
       oEmitNone(iData)
       oEmitString
       oEmitNone(iText)
       oOperandPushString
       @EmitStringDescriptor
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mString)
         | mString:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        >>
       ;EmitStringDescriptor
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      ] or >
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tIfEnd)
    | *:
    ] or >
    >>
   ;Statements
   [ (tIfEnd)
   | tIfEnd:
   oFixAndFreeShuntList
   oOperandPop
   oEmitMergeSourceCoordinate
   ] or >
   >>
  ;IfStmt
  ] or >
  }
  [ (tIfBegin)
  | tIfBegin:
  @IfStmt
   oEmitSourceCoordinate
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | *:
      [ (tFetchString)
      | tFetchString:
      oOperandSetLength(regCX)
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tOrd)
     | tOrd:
     @OperandOrd
      @OperandForceAddressIntoTemp
       [ oOperandChooseMode (mStatic)
       | mStatic:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       oOperandSwap
       oEmitDouble(iLoada)
       oOperandPop
       ] or >
       oOperandSetLength(two)
       >>
      ;OperandForceAddressIntoTemp
      oOperandSetMode(mTempIndirect)
      oOperandSetLength(one)
      oOperandPushMode(mManifest)
      oOperandSetValue(zero)
      oOperandSetLength(two)
      @OperandForceIntoTemp
       [ oOperandChooseMode (mManifest)
       | *:
       [ oOperandChooseLength (two)
       | two:
       @OperandPushTempWord
        oTempAllocate
        oOperandPushTemp
        oOperandSetValue(zero)
        oOperandSetLength(two)
        >>
       ;OperandPushTempWord
       ] or >
       oOperandSwap
       oEmitDouble(iMov)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandSetMode(mTemp)
       >>
      ;OperandForceIntoTemp
      oOperandSetLength(one)
      oOperandSwap
      oEmitDouble(iMov)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTempIndirect)
       | mTempIndirect:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandSetLength(two)
      >>
     ;OperandOrd
     ] or >
     }
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tNE)
     | tNE:
     @OperandEqualPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      @OperandAreLeftAndRightManifest
       [ oOperandChooseMode (mStatic)
       | *:
       >>no
      ;OperandAreLeftAndRightManifest
      [@OperandAreLeftAndRightManifest (no)
      | *:
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mTemp)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oOperandSwap
        >>yes
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (yes)
       | yes:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mTemp)
       | mTemp:
       oTempFree
       ] or >
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJeq)
      ] or >
      >>
     ;OperandEqualPop
     @OperandNot
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      oOperandComplementJumpCondition
      >>
     ;OperandNot
     ] or >
     }
     [ (tIfThen)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tIfThen (tIfThen)
   [ oOperandChooseJumpCondition (iJne)
   | *:
   oOperandComplementJumpCondition
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJeq)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tWriteBegin)
    | tWriteBegin:
    @WriteProc
     oEmitSourceCoordinate
     [ (tTrapBegin)
     | *:
     @WriteParameter
      ?tTrapBegin (tTrapBegin)
      ?tLiteralAddress (tLiteralAddress)
      @OperandPushVariable
       oOperandPushVariable
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       [ (tVarParm)
       | *:
       >>
      ;OperandPushVariable
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tVarParm (tVarParm)
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralString)
       | tLiteralString:
       oEmitNone(iData)
       oEmitString
       oEmitNone(iText)
       oOperandPushString
       @EmitStringDescriptor
        @OperandForceAddressIntoTemp
         [ oOperandChooseMode (mString)
         | mString:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         oOperandSwap
         oEmitDouble(iLoada)
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandForceAddressIntoTemp
        >>
       ;EmitStringDescriptor
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tParmEnd)
      | *:
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTemp)
        | mTemp:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      @OperandPushExpression
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tParmEnd)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToStack
       [ oOperandChooseLength (two)
       | two:
       oEmitSingle(iPush)
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       oOperandPushMode(mStack)
       ] or >
       >>
      ;OperandForceToStack
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStack)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      ?tParmEnd (tParmEnd)
      ?tTrap (tTrap)
      oOperandPushTrap
      oEmitSingle(iCall)
      oOperandPop
      oOperandPushMode(mStackReg)
      oOperandSetLength(two)
      oOperandPushMode(mManifest)
      oOperandSetLength(two)
      oOperandSetValue(twelve)
      oEmitDouble(iAdd)
      oOperandPop
      oOperandPop
      >>
     ;WriteParameter
     }
     [ (tWriteEnd)
     | tWriteEnd:
     ] or >
     >>
    ;WriteProc
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      ] or >
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tIfEnd)
    | *:
    ] or >
    >>
   ;Statements
   [ (tIfEnd)
   | tIfEnd:
   oFixAndFreeShuntList
   oOperandPop
   oEmitMergeSourceCoordinate
   ] or >
   >>
  ;IfStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
