make: Entering directory `/cas/student/cisc458n/cisc458/phase4/coderlinux'
/bin/cp coder.out coder.sst coder.def ../lib/pt
make: Leaving directory `/cas/student/cisc458n/cisc458/phase4/coderlinux'
@Program
 @EmitProgramPrologue
  oEmitNone(iData)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandEnterValueFromDataAreaSize
  oOperandPushMode(mGlobalBase)
  oEmitDouble(iSpace)
  oOperandPop
  oOperandPop
  oEmitProcLabel(mLineNum)
  oOperandPushMode(mWord)
  oOperandSetLength(two)
  oOperandSetValue(zero)
  oEmitSingle(iWord)
  oOperandPop
  oEmitNone(iText)
  oOperandPushMode(mMainProc)
  oEmitSingle(iGlobl)
  oEmitProcLabel(mMainProc)
  oOperandPop
  oEmitNone(iEnter)
  >>
 ;EmitProgramPrologue
 @Block
  [ (tLiteralInteger)
  | tLiteralInteger:
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  oEmitDouble(iMov)
  [ (tFileDescriptor)
  | tFileDescriptor:
  ] or >
  oOperandPop
  oOperandPop
  ] or >
  }
  [ (tLiteralInteger)
  | tLiteralInteger:
  oOperandPushInteger
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  oEmitDouble(iMov)
  [ (tArrayDescriptor)
  | tArrayDescriptor:
  oArrayEnterLowerBound
  oOperandPop
  @OperandPopAndFreeTemp
   [ oOperandChooseMode (mStatic)
   | *:
   oOperandPop
   >>
  ;OperandPopAndFreeTemp
  ?tLiteralInteger (tLiteralInteger)
  oOperandPushInteger
  oArrayEnterUpperBound
  ?tLiteralAddress (tLiteralAddress)
  oOperandPushVariable
  oOperandSwap
  oEmitDouble(iMov)
  ?tArrayDescriptor (tArrayDescriptor)
  ] or >
  oOperandPop
  oOperandPop
  ] or >
  }
  [ (tSkipProc)
  | tSkipProc:
  oEmitUnconditionalForwardBranch
  oFixPushLastAddress
  @Routine
   oEmitProcLabel(mProc)
   oEmitNone(iEnter)
   [ (tLiteralAddress)
   | *:
   oOperandPushMode(mArgument)
   oOperandSetValue(four)
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandNextParameter
    oOperandSetMode(mManifest)
    oOperandPushMode(mManifest)
    oOperandSetValue(four)
    oOperandAddManifestValues
    oOperandPop
    oOperandSetMode(mArgument)
    >>
   ;OperandNextParameter
   oOperandPushVariable
   ] or >
   }
   [ (tStoreParmInteger)
   | tStoreParmInteger:
   oOperandSwap
   oOperandPushCopy
   oOperandSwapLeftAndDest
   oOperandSetLength(two)
   @EmitMove
    @OperandLeftOrRightIsTemp
     [ oOperandChooseMode (mArgument)
     | *:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     >>no
    ;OperandLeftOrRightIsTemp
    [@OperandLeftOrRightIsTemp (no)
    | *:
    [ oOperandChooseMode (mArgument)
    | *:
    oOperandPushCopy
    @OperandForceIntoTemp
     [ oOperandChooseMode (mArgument)
     | *:
     [ oOperandChooseLength (two)
     | two:
     @OperandPushTempWord
      oTempAllocate
      oOperandPushTemp
      oOperandSetValue(zero)
      oOperandSetLength(two)
      >>
     ;OperandPushTempWord
     ] or >
     oOperandSwap
     oEmitDouble(iMov)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mArgument)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandSetMode(mTemp)
     >>
    ;OperandForceIntoTemp
    oOperandSwapLeftAndDest
    oEmitDouble(iMov)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mTemp)
     | mTemp:
     oTempFree
     ] or >
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandSwap
    >>
   ;EmitMove
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mArgument)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   ] or >
   }
   [ (tParmEnd)
   | tParmEnd:
   ] or >
   oOperandPop
   @Block
    [ (tIfBegin)
    | tIfBegin:
    @IfStmt
     oEmitSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tEQ)
       | tEQ:
       @OperandEqualPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue (one)
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @OperandAreLeftAndRightManifest
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandAreLeftAndRightManifest
        [@OperandAreLeftAndRightManifest (no)
        | *:
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oEmitDouble(iCmp)
         ] or >
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJeq)
        ] or >
        >>
       ;OperandEqualPop
       ] or >
       }
       [ (tIfThen)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tIfThen (tIfThen)
     [ oOperandChooseJumpCondition (iJeq)
     | *:
     oOperandComplementJumpCondition
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJne)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tSubscriptBegin)
        | *:
        [ (tSubscriptBegin)
        | tSubscriptBegin:
        @OperandPushExpression
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tSubscriptInteger)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        [ (tSubscriptInteger)
        | tSubscriptInteger:
        @OperandSubscriptIntegerPop
         [ oOperandChooseMode (mManifest)
         | mManifest:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         oOperandFoldManifestSubscript
         oOperandPop
         ] or >
         oOperandSetLength(two)
         >>
        ;OperandSubscriptIntegerPop
        ] or >
        ] or >
        [ (tLiteralAddress)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mManifest)
          | mManifest:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          oOperandFoldManifestSubscript
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tAdd)
        | tAdd:
        [ (tAssignInteger)
        | tAssignInteger:
        @OperandAddAssignPopPopPop
         [ oOperandCompareRightAndDest (no)
         | *:
         oOperandSwap
         [ oOperandCompareRightAndDest (yes)
         | yes:
         oOperandPop
         @OperandAddRightToLeftPop
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          oEmitSingle(iInc)
          ] or >
          >>
         ;OperandAddRightToLeftPop
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         >>
        ;OperandAddAssignPopPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tIfMerge)
      | *:
      ] or >
      >>
     ;Statements
     [ (tIfMerge)
     | tIfMerge:
     oEmitUnconditionalForwardBranch
     oFixAndFreeShuntList
     oOperandPop
     oFixPushLastAddress
     oEmitMergeSourceCoordinate
     @Statements
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tSubscriptBegin)
        | *:
        [ (tSubscriptBegin)
        | tSubscriptBegin:
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | *:
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tSubscriptInteger)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        [ (tSubscriptInteger)
        | tSubscriptInteger:
        @OperandSubscriptIntegerPop
         [ oOperandChooseMode (mStatic)
         | *:
         @OperandSubscriptNonManifestIntegerPop
          [ oOptionTestChecking (yes)
          | yes:
          @OperandCheckedSubscriptNonManifestIntegerPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mStatic)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            ] or >
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            >>
           ;OperandForceIntoTemp
           [ oOptionTestChecking (yes)
           | yes:
           oOperandSwap
           @OperandPushArrayUpperBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayUpperBound
            ] or >
            >>
           ;OperandPushArrayUpperBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJle)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @EmitCmp
            oOperandSwap
            [ oOperandChooseMode (mTemp)
            | *:
            oOperandSwap
            @OperandLeftOrRightIsTemp
             [ oOperandChooseMode (mManifest)
             | *:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oOperandSwap
             >>yes
            ;OperandLeftOrRightIsTemp
            [@OperandLeftOrRightIsTemp (yes)
            | yes:
            oEmitDouble(iCmp)
            ] or >
            >>
           ;EmitCmp
           oOperandPushJumpCondition(iJge)
           oEmitConditionalForwardBranch
           oFixPushLastAddress
           oOperandPop
           oOperandPop
           @EmitSubscriptAbort
            oOperandPushMode(mLineNum)
            oOperandSetLength(two)
            oEmitSingle(iPush)
            oOperandPop
            oOperandPushMode(mTrap)
            oOperandSetValue(trSubscriptAbort)
            oEmitSingle(iCall)
            oOperandPop
            >>
           ;EmitSubscriptAbort
           oFixForwardBranch
           oFixPopAddress
           oFixForwardBranch
           oFixPopAddress
           ] or >
           oOperandSwap
           @OperandPushArrayLowerBound
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushArrayLowerBound
            ] or >
            >>
           ;OperandPushArrayLowerBound
           oOperandSwapLeftAndDest
           @OperandSubtractPop
            @OperandAreLeftAndRightManifest
             [ oOperandChooseMode (mManifest)
             | mManifest:
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             >>no
            ;OperandAreLeftAndRightManifest
            [@OperandAreLeftAndRightManifest (no)
            | no:
            [ oOperandChooseManifestValue (one)
            | one:
            oOperandPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             ] or >
             >>
            ;OperandForceIntoTemp
            oEmitSingle(iDec)
            ] or >
            ] or >
            >>
           ;OperandSubtractPop
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(two)
           oEmitDouble(iShl)
           oOperandPop
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | mStatic:
           oOperandPushMode(mManifest)
           oOperandSetLength(two)
           oOperandSetValue(eight)
           oOperandAddManifestValues
           oOperandPop
           @OperandForceAddressIntoTemp
            [ oOperandChooseMode (mStatic)
            | mStatic:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            oOperandSwap
            oEmitDouble(iLoada)
            oOperandPop
            ] or >
            oOperandSetLength(two)
            >>
           ;OperandForceAddressIntoTemp
           oEmitDouble(iAdd)
           @OperandPopAndFreeTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            oTempFree
            ] or >
            oOperandPop
            >>
           ;OperandPopAndFreeTemp
           ] or >
           oOperandSetMode(mTempIndirect)
           oOperandSetLength(two)
           >>
          ;OperandCheckedSubscriptNonManifestIntegerPop
          ] or >
          >>
         ;OperandSubscriptNonManifestIntegerPop
         oOperandSetLength(two)
         >>
        ;OperandSubscriptIntegerPop
        ] or >
        ] or >
        [ (tLiteralAddress)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mStatic)
          | *:
          @OperandSubscriptNonManifestIntegerPop
           [ oOptionTestChecking (yes)
           | yes:
           @OperandCheckedSubscriptNonManifestIntegerPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mStatic)
             | *:
             [ oOperandChooseLength (two)
             | two:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             ] or >
             oOperandSwap
             oEmitDouble(iMov)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mStatic)
              | *:
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             oOperandSetMode(mTemp)
             >>
            ;OperandForceIntoTemp
            [ oOptionTestChecking (yes)
            | yes:
            oOperandSwap
            @OperandPushArrayUpperBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayUpperBound
             ] or >
             >>
            ;OperandPushArrayUpperBound
            oOperandSwapLeftAndDest
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oOperandSwap
              >>yes
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (yes)
             | yes:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            oOperandPushJumpCondition(iJle)
            oEmitConditionalForwardBranch
            oFixPushLastAddress
            oOperandPop
            oOperandPop
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oOperandSwap
              >>yes
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (yes)
             | yes:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            oOperandPushJumpCondition(iJge)
            oEmitConditionalForwardBranch
            oFixPushLastAddress
            oOperandPop
            oOperandPop
            @EmitSubscriptAbort
             oOperandPushMode(mLineNum)
             oOperandSetLength(two)
             oEmitSingle(iPush)
             oOperandPop
             oOperandPushMode(mTrap)
             oOperandSetValue(trSubscriptAbort)
             oEmitSingle(iCall)
             oOperandPop
             >>
            ;EmitSubscriptAbort
            oFixForwardBranch
            oFixPopAddress
            oFixForwardBranch
            oFixPopAddress
            ] or >
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @OperandSubtractPop
             @OperandAreLeftAndRightManifest
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              >>no
             ;OperandAreLeftAndRightManifest
             [@OperandAreLeftAndRightManifest (no)
             | no:
             [ oOperandChooseManifestValue (one)
             | one:
             oOperandPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              ] or >
              >>
             ;OperandForceIntoTemp
             oEmitSingle(iDec)
             ] or >
             ] or >
             >>
            ;OperandSubtractPop
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(two)
            oEmitDouble(iShl)
            oOperandPop
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            oOperandAddManifestValues
            oOperandPop
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            oOperandSetMode(mTempIndirect)
            oOperandSetLength(two)
            >>
           ;OperandCheckedSubscriptNonManifestIntegerPop
           ] or >
           >>
          ;OperandSubscriptNonManifestIntegerPop
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tSubscriptBegin)
         | *:
         [ (tSubscriptBegin)
         | tSubscriptBegin:
         @OperandPushExpression
          [ (tLiteralAddress)
          | tLiteralAddress:
          @OperandPushVariable
           oOperandPushVariable
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | *:
           [ (tFetchInteger)
           | tFetchInteger:
           ] or >
           >>
          ;OperandPushVariable
          ] or >
          }
          [ (tLiteralInteger)
          | tLiteralInteger:
          oOperandPushInteger
          ] or >
          }
          [ (tSubtract)
          | tSubtract:
          @OperandSubtractPop
           @OperandAreLeftAndRightManifest
            [ oOperandChooseMode (mManifest)
            | mManifest:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandAreLeftAndRightManifest
           [@OperandAreLeftAndRightManifest (no)
           | no:
           [ oOperandChooseManifestValue (one)
           | one:
           oOperandPop
           @OperandForceIntoTemp
            [ oOperandChooseMode (mStatic)
            | *:
            [ oOperandChooseLength (two)
            | two:
            @OperandPushTempWord
             oTempAllocate
             oOperandPushTemp
             oOperandSetValue(zero)
             oOperandSetLength(two)
             >>
            ;OperandPushTempWord
            ] or >
            oOperandSwap
            oEmitDouble(iMov)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mStatic)
             | *:
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            oOperandSetMode(mTemp)
            >>
           ;OperandForceIntoTemp
           oEmitSingle(iDec)
           ] or >
           ] or >
           >>
          ;OperandSubtractPop
          ] or >
          }
          [ (tSubscriptInteger)
          | *:
          ] or >
          >>
         ;OperandPushExpression
         [ (tSubscriptInteger)
         | tSubscriptInteger:
         @OperandSubscriptIntegerPop
          [ oOperandChooseMode (mTemp)
          | *:
          @OperandSubscriptNonManifestIntegerPop
           [ oOptionTestChecking (yes)
           | yes:
           @OperandCheckedSubscriptNonManifestIntegerPop
            @OperandForceIntoTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             ] or >
             >>
            ;OperandForceIntoTemp
            [ oOptionTestChecking (yes)
            | yes:
            oOperandSwap
            @OperandPushArrayUpperBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayUpperBound
             ] or >
             >>
            ;OperandPushArrayUpperBound
            oOperandSwapLeftAndDest
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oOperandSwap
              >>yes
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (yes)
             | yes:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            oOperandPushJumpCondition(iJle)
            oEmitConditionalForwardBranch
            oFixPushLastAddress
            oOperandPop
            oOperandPop
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @EmitCmp
             oOperandSwap
             [ oOperandChooseMode (mTemp)
             | *:
             oOperandSwap
             @OperandLeftOrRightIsTemp
              [ oOperandChooseMode (mManifest)
              | *:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oOperandSwap
              >>yes
             ;OperandLeftOrRightIsTemp
             [@OperandLeftOrRightIsTemp (yes)
             | yes:
             oEmitDouble(iCmp)
             ] or >
             >>
            ;EmitCmp
            oOperandPushJumpCondition(iJge)
            oEmitConditionalForwardBranch
            oFixPushLastAddress
            oOperandPop
            oOperandPop
            @EmitSubscriptAbort
             oOperandPushMode(mLineNum)
             oOperandSetLength(two)
             oEmitSingle(iPush)
             oOperandPop
             oOperandPushMode(mTrap)
             oOperandSetValue(trSubscriptAbort)
             oEmitSingle(iCall)
             oOperandPop
             >>
            ;EmitSubscriptAbort
            oFixForwardBranch
            oFixPopAddress
            oFixForwardBranch
            oFixPopAddress
            ] or >
            oOperandSwap
            @OperandPushArrayLowerBound
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushArrayLowerBound
             ] or >
             >>
            ;OperandPushArrayLowerBound
            oOperandSwapLeftAndDest
            @OperandSubtractPop
             @OperandAreLeftAndRightManifest
              [ oOperandChooseMode (mManifest)
              | mManifest:
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              >>no
             ;OperandAreLeftAndRightManifest
             [@OperandAreLeftAndRightManifest (no)
             | no:
             [ oOperandChooseManifestValue (one)
             | one:
             oOperandPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              ] or >
              >>
             ;OperandForceIntoTemp
             oEmitSingle(iDec)
             ] or >
             ] or >
             >>
            ;OperandSubtractPop
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(two)
            oEmitDouble(iShl)
            oOperandPop
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | mStatic:
            oOperandPushMode(mManifest)
            oOperandSetLength(two)
            oOperandSetValue(eight)
            oOperandAddManifestValues
            oOperandPop
            @OperandForceAddressIntoTemp
             [ oOperandChooseMode (mStatic)
             | mStatic:
             @OperandPushTempWord
              oTempAllocate
              oOperandPushTemp
              oOperandSetValue(zero)
              oOperandSetLength(two)
              >>
             ;OperandPushTempWord
             oOperandSwap
             oEmitDouble(iLoada)
             oOperandPop
             ] or >
             oOperandSetLength(two)
             >>
            ;OperandForceAddressIntoTemp
            oEmitDouble(iAdd)
            @OperandPopAndFreeTemp
             [ oOperandChooseMode (mTemp)
             | mTemp:
             oTempFree
             ] or >
             oOperandPop
             >>
            ;OperandPopAndFreeTemp
            ] or >
            oOperandSetMode(mTempIndirect)
            oOperandSetLength(two)
            >>
           ;OperandCheckedSubscriptNonManifestIntegerPop
           ] or >
           >>
          ;OperandSubscriptNonManifestIntegerPop
          oOperandSetLength(two)
          >>
         ;OperandSubscriptIntegerPop
         ] or >
         ] or >
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tAdd)
        | tAdd:
        [ (tAssignInteger)
        | tAssignInteger:
        @OperandAddAssignPopPopPop
         [ oOperandCompareRightAndDest (no)
         | *:
         oOperandSwap
         [ oOperandCompareRightAndDest (no)
         | *:
         oOperandSwap
         @OperandAddPop
          @OperandAreLeftAndRightManifest
           [ oOperandChooseMode (mTempIndirect)
           | *:
           >>no
          ;OperandAreLeftAndRightManifest
          [@OperandAreLeftAndRightManifest (no)
          | no:
          [ oOperandChooseManifestValue ()
          | *:
          oOperandSwap
          [ oOperandChooseManifestValue ()
          | *:
          [ oOperandChooseMode (mTempIndirect)
          | *:
          @OperandForceLeftIntoTemp
           oOperandSwap
           [ oOperandChooseMode (mTempIndirect)
           | *:
           @OperandForceIntoTemp
            [ oOperandChooseMode (mTempIndirect)
            | mTempIndirect:
            oOperandPushCopy
            oOperandSetMode(mTemp)
            oOperandSwap
            oEmitDouble(iMov)
            oOperandPop
            ] or >
            >>
           ;OperandForceIntoTemp
           oOperandSwap
           >>
          ;OperandForceLeftIntoTemp
          oEmitDouble(iAdd)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAddPop
         @OperandAssignIntegerPopPop
          [ oOperandCompareLeftAndRight (no)
          | no:
          @EmitMove
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mTemp)
            | mTemp:
            >>yes
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (yes)
           | yes:
           oEmitDouble(iMov)
           ] or >
           >>
          ;EmitMove
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mTempIndirect)
           | mTempIndirect:
           oTempFree
           ] or >
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          ] or >
          >>
         ;OperandAssignIntegerPopPop
         >>
        ;OperandAddAssignPopPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tIfEnd)
      | *:
      ] or >
      >>
     ;Statements
     oFixForwardBranch
     oFixPopAddress
     ?tIfEnd (tIfEnd)
     ] or >
     >>
    ;IfStmt
    ] or >
    }
    [ (tProcedureEnd)
    | *:
    ] or >
    >>
   ;Block
   ?tProcedureEnd (tProcedureEnd)
   oEmitNone(iLeave)
   oEmitNone(iReturn)
   >>
  ;Routine
  [ (tAssignBegin)
  | *:
  ] or >
  oFixForwardBranch
  oFixPopAddress
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tSubscriptBegin)
    | *:
    [ (tSubscriptBegin)
    | tSubscriptBegin:
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tSubscriptInteger)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tSubscriptInteger)
    | tSubscriptInteger:
    @OperandSubscriptIntegerPop
     [ oOperandChooseMode (mManifest)
     | mManifest:
     oOperandSwap
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandSwap
     oOperandFoldManifestSubscript
     oOperandPop
     ] or >
     oOperandSetLength(two)
     >>
    ;OperandSubscriptIntegerPop
    ] or >
    ] or >
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tDoBegin)
  | tDoBegin:
  @DoStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @Statements
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tSubscriptBegin)
      | *:
      [ (tSubscriptBegin)
      | tSubscriptBegin:
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tSubscriptInteger)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      [ (tSubscriptInteger)
      | tSubscriptInteger:
      @OperandSubscriptIntegerPop
       [ oOperandChooseMode (mStatic)
       | *:
       @OperandSubscriptNonManifestIntegerPop
        [ oOptionTestChecking (yes)
        | yes:
        @OperandCheckedSubscriptNonManifestIntegerPop
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          ] or >
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          >>
         ;OperandForceIntoTemp
         [ oOptionTestChecking (yes)
         | yes:
         oOperandSwap
         @OperandPushArrayUpperBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayUpperBound
          ] or >
          >>
         ;OperandPushArrayUpperBound
         oOperandSwapLeftAndDest
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mTemp)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oOperandSwap
           >>yes
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (yes)
          | yes:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         oOperandPushJumpCondition(iJle)
         oEmitConditionalForwardBranch
         oFixPushLastAddress
         oOperandPop
         oOperandPop
         oOperandSwap
         @OperandPushArrayLowerBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayLowerBound
          ] or >
          >>
         ;OperandPushArrayLowerBound
         oOperandSwapLeftAndDest
         @EmitCmp
          oOperandSwap
          [ oOperandChooseMode (mTemp)
          | *:
          oOperandSwap
          @OperandLeftOrRightIsTemp
           [ oOperandChooseMode (mManifest)
           | *:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | mTemp:
           oOperandSwap
           >>yes
          ;OperandLeftOrRightIsTemp
          [@OperandLeftOrRightIsTemp (yes)
          | yes:
          oEmitDouble(iCmp)
          ] or >
          >>
         ;EmitCmp
         oOperandPushJumpCondition(iJge)
         oEmitConditionalForwardBranch
         oFixPushLastAddress
         oOperandPop
         oOperandPop
         @EmitSubscriptAbort
          oOperandPushMode(mLineNum)
          oOperandSetLength(two)
          oEmitSingle(iPush)
          oOperandPop
          oOperandPushMode(mTrap)
          oOperandSetValue(trSubscriptAbort)
          oEmitSingle(iCall)
          oOperandPop
          >>
         ;EmitSubscriptAbort
         oFixForwardBranch
         oFixPopAddress
         oFixForwardBranch
         oFixPopAddress
         ] or >
         oOperandSwap
         @OperandPushArrayLowerBound
          [ oOperandChooseMode (mStatic)
          | mStatic:
          oOperandPushArrayLowerBound
          ] or >
          >>
         ;OperandPushArrayLowerBound
         oOperandSwapLeftAndDest
         @OperandSubtractPop
          @OperandAreLeftAndRightManifest
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oOperandSwap
           [ oOperandChooseMode (mTemp)
           | *:
           oOperandSwap
           >>no
          ;OperandAreLeftAndRightManifest
          [@OperandAreLeftAndRightManifest (no)
          | no:
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          @OperandForceIntoTemp
           [ oOperandChooseMode (mTemp)
           | mTemp:
           ] or >
           >>
          ;OperandForceIntoTemp
          oEmitSingle(iDec)
          ] or >
          ] or >
          >>
         ;OperandSubtractPop
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(two)
         oEmitDouble(iShl)
         oOperandPop
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | mStatic:
         oOperandPushMode(mManifest)
         oOperandSetLength(two)
         oOperandSetValue(eight)
         oOperandAddManifestValues
         oOperandPop
         @OperandForceAddressIntoTemp
          [ oOperandChooseMode (mStatic)
          | mStatic:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          oOperandSwap
          oEmitDouble(iLoada)
          oOperandPop
          ] or >
          oOperandSetLength(two)
          >>
         ;OperandForceAddressIntoTemp
         oEmitDouble(iAdd)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         oOperandSetMode(mTempIndirect)
         oOperandSetLength(two)
         >>
        ;OperandCheckedSubscriptNonManifestIntegerPop
        ] or >
        >>
       ;OperandSubscriptNonManifestIntegerPop
       oOperandSetLength(two)
       >>
      ;OperandSubscriptIntegerPop
      ] or >
      ] or >
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mTempIndirect)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mTempIndirect)
        | mTempIndirect:
        oTempFree
        ] or >
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tDoBreakIf)
    | *:
    ] or >
    >>
   ;Statements
   ?tDoBreakIf (tDoBreakIf)
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tGT)
     | tGT:
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (trEoln)
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        >>no
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (no)
       | *:
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJgt)
      ] or >
      >>
     ;OperandGreaterPop
     ] or >
     }
     [ (tDoTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tDoTest (tDoTest)
   [ oOperandChooseJumpCondition (iJgt)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJgt)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tDoEnd)
    | *:
    ] or >
    >>
   ;Statements
   ?tDoEnd (tDoEnd)
   oEmitUnconditionalBackwardBranch
   oFixAndFreeShuntList
   oFixPopAddress
   oOperandPop
   >>
  ;DoStmt
  ] or >
  }
  [ (tWriteBegin)
  | tWriteBegin:
  @WriteProc
   oEmitSourceCoordinate
   [ (tTrapBegin)
   | *:
   @WriteParameter
    ?tTrapBegin (tTrapBegin)
    ?tLiteralAddress (tLiteralAddress)
    @OperandPushVariable
     oOperandPushVariable
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     [ (tVarParm)
     | *:
     >>
    ;OperandPushVariable
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     ] or >
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tVarParm (tVarParm)
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    [ (tParmEnd)
    | *:
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     ] or >
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    @OperandPushExpression
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tParmEnd)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToStack
     [ oOperandChooseLength (two)
     | two:
     oEmitSingle(iPush)
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushMode(mStack)
     ] or >
     >>
    ;OperandForceToStack
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStack)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    ?tParmEnd (tParmEnd)
    ?tTrap (tTrap)
    oOperandPushTrap
    oEmitSingle(iCall)
    oOperandPop
    oOperandPushMode(mStackReg)
    oOperandSetLength(two)
    oOperandPushMode(mManifest)
    oOperandSetLength(two)
    oOperandSetValue(twelve)
    oEmitDouble(iAdd)
    oOperandPop
    oOperandPop
    >>
   ;WriteParameter
   }
   [ (tWriteEnd)
   | tWriteEnd:
   ] or >
   >>
  ;WriteProc
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tLiteralAddress)
   | tLiteralAddress:
   @OperandPushVariable
    oOperandPushVariable
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    [ (tVarParm)
    | *:
    >>
   ;OperandPushVariable
   oOperandPushCopy
   @OperandForceToStack
    [ oOperandChooseLength (two)
    | two:
    oEmitSingle(iPush)
    @OperandPopAndFreeTemp
     [ oOperandChooseMode (mStatic)
     | *:
     oOperandPop
     >>
    ;OperandPopAndFreeTemp
    oOperandPushMode(mStack)
    ] or >
    >>
   ;OperandForceToStack
   oOperandPop
   ?tVarParm (tVarParm)
   ?tParmEnd (tParmEnd)
   [ (tTrap)
   | tTrap:
   @OperandPopAndFreeTemp
    [ oOperandChooseMode (mStatic)
    | *:
    oOperandPop
    >>
   ;OperandPopAndFreeTemp
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   oOperandPushMode(mStackReg)
   oOperandSetLength(two)
   oOperandPushMode(mManifest)
   oOperandSetLength(two)
   oOperandSetValue(four)
   oEmitDouble(iAdd)
   oOperandPop
   oOperandPop
   ] or >
   ] or >
   >>
  ;TrapStmt
  ] or >
  }
  [ (tAssignBegin)
  | tAssignBegin:
  @AssignStmt
   oEmitSourceCoordinate
   ?tLiteralAddress (tLiteralAddress)
   @OperandPushVariable
    oOperandPushVariable
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    [ (tLiteralInteger)
    | *:
    >>
   ;OperandPushVariable
   @OperandPushExpressionAssignPopPop
    [ (tLiteralInteger)
    | tLiteralInteger:
    oOperandPushInteger
    ] or >
    }
    [ (tAssignInteger)
    | tAssignInteger:
    @OperandAssignIntegerPopPop
     [ oOperandCompareLeftAndRight (no)
     | no:
     @EmitMove
      @OperandLeftOrRightIsTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       >>no
      ;OperandLeftOrRightIsTemp
      [@OperandLeftOrRightIsTemp (no)
      | *:
      [ oOperandChooseMode (mManifest)
      | mManifest:
      oEmitDouble(iMov)
      ] or >
      >>
     ;EmitMove
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mManifest)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     ] or >
     >>
    ;OperandAssignIntegerPopPop
    ] or >
    >>
   ;OperandPushExpressionAssignPopPop
   >>
  ;AssignStmt
  ] or >
  }
  [ (tDoBegin)
  | tDoBegin:
  @DoStmt
   oFixPushAddress
   oEmitMergeSourceCoordinate
   @Statements
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPushCopy
        @OperandForceIntoTemp
         [ oOperandChooseMode (mStatic)
         | *:
         [ oOperandChooseLength (two)
         | two:
         @OperandPushTempWord
          oTempAllocate
          oOperandPushTemp
          oOperandSetValue(zero)
          oOperandSetLength(two)
          >>
         ;OperandPushTempWord
         ] or >
         oOperandSwap
         oEmitDouble(iMov)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSetMode(mTemp)
         >>
        ;OperandForceIntoTemp
        oOperandSwapLeftAndDest
        oEmitDouble(iMov)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mTemp)
         | mTemp:
         oTempFree
         ] or >
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandSwap
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tWhileBegin)
    | tWhileBegin:
    @WhileStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralInteger)
       | tLiteralInteger:
       oOperandPushInteger
       ] or >
       }
       [ (tGE)
       | tGE:
       @OperandLessPop
        oOperandSwap
        @OperandGreaterPop
         [ oOperandCompareLeftAndRight (no)
         | no:
         [ oOperandChooseManifestValue ()
         | *:
         oOperandSwap
         [ oOperandChooseManifestValue (one)
         | one:
         oOperandPop
         @EmitTst
          [ oOperandChooseLength (two)
          | two:
          oOperandPushMode(mManifest)
          oOperandSetValue(zero)
          oOperandSetLength(two)
          ] or >
          @EmitCmp
           oOperandSwap
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandSwap
           @OperandLeftOrRightIsTemp
            [ oOperandChooseMode (mManifest)
            | *:
            oOperandSwap
            [ oOperandChooseMode (mStatic)
            | *:
            oOperandSwap
            >>no
           ;OperandLeftOrRightIsTemp
           [@OperandLeftOrRightIsTemp (no)
           | *:
           [ oOperandChooseMode (mManifest)
           | mManifest:
           oEmitDouble(iCmp)
           ] or >
           >>
          ;EmitCmp
          oOperandPop
          >>
         ;EmitTst
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushJumpCondition(iJle)
         ] or >
         ] or >
         >>
        ;OperandGreaterPop
        >>
       ;OperandLessPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        oOperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tWhileTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tWhileTest (tWhileTest)
     oOperandComplementJumpCondition
     [ oOperandChooseJumpCondition (iJle)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJle)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      [ (tCallBegin)
      | tCallBegin:
      @CallStmt
       oEmitSourceCoordinate
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(zero)
       [ (tLiteralAddress)
       | *:
       @OperandPushExpression
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tParmEnd)
        | *:
        ] or >
        >>
       ;OperandPushExpression
       @OperandConvertJumpConditionToData
        [ oOperandIsJumpCondition (no)
        | no:
        ] or >
        >>
       ;OperandConvertJumpConditionToData
       [ (tParmEnd)
       | *:
       @OperandForceToStack
        [ oOperandChooseLength (two)
        | two:
        oEmitSingle(iPush)
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushMode(mStack)
        ] or >
        >>
       ;OperandForceToStack
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStack)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ?tParmEnd (tParmEnd)
       oOperandPushMode(mManifest)
       oOperandSetLength(two)
       oOperandSetValue(four)
       oOperandAddManifestValues
       oOperandPop
       }
       [ (tCallEnd)
       | tCallEnd:
       ] or >
       oOperandPushProcedure
       oOperandSetMode(mProc)
       oEmitSingle(iCall)
       oOperandPop
       oOperandPushMode(mStackReg)
       oOperandSetLength(two)
       oOperandSwap
       oEmitDouble(iAdd)
       oOperandPop
       oOperandPop
       oEmitMergeSourceCoordinate
       >>
      ;CallStmt
      ] or >
      }
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tSubtract)
        | tSubtract:
        [ (tAssignInteger)
        | tAssignInteger:
        @OperandSubtractAssignPopPopPop
         oOperandSwap
         [ oOperandCompareRightAndDest (yes)
         | yes:
         oOperandPop
         @OperandSubtractRightFromLeftPop
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          oEmitSingle(iDec)
          ] or >
          >>
         ;OperandSubtractRightFromLeftPop
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         >>
        ;OperandSubtractAssignPopPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tWhileEnd)
      | *:
      ] or >
      >>
     ;Statements
     ?tWhileEnd (tWhileEnd)
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;WhileStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      [ (tLiteralInteger)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAssignIntegerPopPop
       [ oOperandCompareLeftAndRight (no)
       | no:
       @EmitMove
        @OperandLeftOrRightIsTemp
         [ oOperandChooseMode (mManifest)
         | *:
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         >>no
        ;OperandLeftOrRightIsTemp
        [@OperandLeftOrRightIsTemp (no)
        | *:
        [ oOperandChooseMode (mManifest)
        | mManifest:
        oEmitDouble(iMov)
        ] or >
        >>
       ;EmitMove
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAssignIntegerPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tWhileBegin)
    | tWhileBegin:
    @WhileStmt
     oFixPushAddress
     oEmitMergeSourceCoordinate
     @OperandPushBooleanControlExpression
      @OperandPushExpression
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLiteralAddress)
       | tLiteralAddress:
       @OperandPushVariable
        oOperandPushVariable
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | *:
        [ (tFetchInteger)
        | tFetchInteger:
        ] or >
        >>
       ;OperandPushVariable
       ] or >
       }
       [ (tLE)
       | tLE:
       @OperandGreaterPop
        [ oOperandCompareLeftAndRight (no)
        | no:
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        [ oOperandChooseManifestValue ()
        | *:
        oOperandSwap
        @EmitCmp
         oOperandSwap
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandSwap
         @OperandLeftOrRightIsTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandSwap
          >>no
         ;OperandLeftOrRightIsTemp
         [@OperandLeftOrRightIsTemp (no)
         | *:
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPushCopy
         @OperandForceIntoTemp
          [ oOperandChooseMode (mStatic)
          | *:
          [ oOperandChooseLength (two)
          | two:
          @OperandPushTempWord
           oTempAllocate
           oOperandPushTemp
           oOperandSetValue(zero)
           oOperandSetLength(two)
           >>
          ;OperandPushTempWord
          ] or >
          oOperandSwap
          oEmitDouble(iMov)
          @OperandPopAndFreeTemp
           [ oOperandChooseMode (mStatic)
           | *:
           oOperandPop
           >>
          ;OperandPopAndFreeTemp
          oOperandSetMode(mTemp)
          >>
         ;OperandForceIntoTemp
         oOperandSwapLeftAndDest
         oEmitDouble(iCmp)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTemp)
          | mTemp:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandSwap
         >>
        ;EmitCmp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStatic)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        oOperandPushJumpCondition(iJgt)
        ] or >
        >>
       ;OperandGreaterPop
       @OperandNot
        @OperandForceToJumpCondition
         [ oOperandIsJumpCondition (yes)
         | yes:
         ] or >
         >>
        ;OperandForceToJumpCondition
        oOperandComplementJumpCondition
        >>
       ;OperandNot
       ] or >
       }
       [ (tWhileTest)
       | *:
       ] or >
       >>
      ;OperandPushExpression
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      >>
     ;OperandPushBooleanControlExpression
     ?tWhileTest (tWhileTest)
     oOperandComplementJumpCondition
     [ oOperandChooseJumpCondition (iJgt)
     | *:
     @OperandInfixOr
      @OperandForceToJumpCondition
       [ oOperandIsJumpCondition (yes)
       | yes:
       ] or >
       >>
      ;OperandForceToJumpCondition
      [ oOperandChooseJumpCondition (iJgt)
      | *:
      oEmitConditionalForwardBranch
      oFixAndFreeFalseBranches
      oFixPushLastAddress
      oOperandMergeShuntsWithAddress
      oFixPopAddress
      >>
     ;OperandInfixOr
     @Statements
      [ (tWriteBegin)
      | tWriteBegin:
      @WriteProc
       oEmitSourceCoordinate
       [ (tTrapBegin)
       | *:
       @WriteParameter
        ?tTrapBegin (tTrapBegin)
        ?tLiteralAddress (tLiteralAddress)
        @OperandPushVariable
         oOperandPushVariable
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         [ (tVarParm)
         | *:
         >>
        ;OperandPushVariable
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         ] or >
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tVarParm (tVarParm)
        ?tParmEnd (tParmEnd)
        @OperandPushExpression
         [ (tLiteralAddress)
         | tLiteralAddress:
         @OperandPushVariable
          oOperandPushVariable
          [ (tSubscriptBegin)
          | *:
          [ (tSubscriptBegin)
          | tSubscriptBegin:
          @OperandPushExpression
           [ (tLiteralAddress)
           | tLiteralAddress:
           @OperandPushVariable
            oOperandPushVariable
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | *:
            [ (tFetchInteger)
            | tFetchInteger:
            ] or >
            >>
           ;OperandPushVariable
           ] or >
           }
           [ (tSubscriptInteger)
           | *:
           ] or >
           >>
          ;OperandPushExpression
          [ (tSubscriptInteger)
          | tSubscriptInteger:
          @OperandSubscriptIntegerPop
           [ oOperandChooseMode (mStatic)
           | *:
           @OperandSubscriptNonManifestIntegerPop
            [ oOptionTestChecking (yes)
            | yes:
            @OperandCheckedSubscriptNonManifestIntegerPop
             @OperandForceIntoTemp
              [ oOperandChooseMode (mStatic)
              | *:
              [ oOperandChooseLength (two)
              | two:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              ] or >
              oOperandSwap
              oEmitDouble(iMov)
              @OperandPopAndFreeTemp
               [ oOperandChooseMode (mStatic)
               | *:
               oOperandPop
               >>
              ;OperandPopAndFreeTemp
              oOperandSetMode(mTemp)
              >>
             ;OperandForceIntoTemp
             [ oOptionTestChecking (yes)
             | yes:
             oOperandSwap
             @OperandPushArrayUpperBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayUpperBound
              ] or >
              >>
             ;OperandPushArrayUpperBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJle)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @EmitCmp
              oOperandSwap
              [ oOperandChooseMode (mTemp)
              | *:
              oOperandSwap
              @OperandLeftOrRightIsTemp
               [ oOperandChooseMode (mManifest)
               | *:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | mTemp:
               oOperandSwap
               >>yes
              ;OperandLeftOrRightIsTemp
              [@OperandLeftOrRightIsTemp (yes)
              | yes:
              oEmitDouble(iCmp)
              ] or >
              >>
             ;EmitCmp
             oOperandPushJumpCondition(iJge)
             oEmitConditionalForwardBranch
             oFixPushLastAddress
             oOperandPop
             oOperandPop
             @EmitSubscriptAbort
              oOperandPushMode(mLineNum)
              oOperandSetLength(two)
              oEmitSingle(iPush)
              oOperandPop
              oOperandPushMode(mTrap)
              oOperandSetValue(trSubscriptAbort)
              oEmitSingle(iCall)
              oOperandPop
              >>
             ;EmitSubscriptAbort
             oFixForwardBranch
             oFixPopAddress
             oFixForwardBranch
             oFixPopAddress
             ] or >
             oOperandSwap
             @OperandPushArrayLowerBound
              [ oOperandChooseMode (mStatic)
              | mStatic:
              oOperandPushArrayLowerBound
              ] or >
              >>
             ;OperandPushArrayLowerBound
             oOperandSwapLeftAndDest
             @OperandSubtractPop
              @OperandAreLeftAndRightManifest
               [ oOperandChooseMode (mManifest)
               | mManifest:
               oOperandSwap
               [ oOperandChooseMode (mTemp)
               | *:
               oOperandSwap
               >>no
              ;OperandAreLeftAndRightManifest
              [@OperandAreLeftAndRightManifest (no)
              | no:
              [ oOperandChooseManifestValue (one)
              | one:
              oOperandPop
              @OperandForceIntoTemp
               [ oOperandChooseMode (mTemp)
               | mTemp:
               ] or >
               >>
              ;OperandForceIntoTemp
              oEmitSingle(iDec)
              ] or >
              ] or >
              >>
             ;OperandSubtractPop
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(two)
             oEmitDouble(iShl)
             oOperandPop
             oOperandSwap
             [ oOperandChooseMode (mStatic)
             | mStatic:
             oOperandPushMode(mManifest)
             oOperandSetLength(two)
             oOperandSetValue(eight)
             oOperandAddManifestValues
             oOperandPop
             @OperandForceAddressIntoTemp
              [ oOperandChooseMode (mStatic)
              | mStatic:
              @OperandPushTempWord
               oTempAllocate
               oOperandPushTemp
               oOperandSetValue(zero)
               oOperandSetLength(two)
               >>
              ;OperandPushTempWord
              oOperandSwap
              oEmitDouble(iLoada)
              oOperandPop
              ] or >
              oOperandSetLength(two)
              >>
             ;OperandForceAddressIntoTemp
             oEmitDouble(iAdd)
             @OperandPopAndFreeTemp
              [ oOperandChooseMode (mTemp)
              | mTemp:
              oTempFree
              ] or >
              oOperandPop
              >>
             ;OperandPopAndFreeTemp
             ] or >
             oOperandSetMode(mTempIndirect)
             oOperandSetLength(two)
             >>
            ;OperandCheckedSubscriptNonManifestIntegerPop
            ] or >
            >>
           ;OperandSubscriptNonManifestIntegerPop
           oOperandSetLength(two)
           >>
          ;OperandSubscriptIntegerPop
          ] or >
          ] or >
          [ (tFetchInteger)
          | tFetchInteger:
          ] or >
          >>
         ;OperandPushVariable
         ] or >
         }
         [ (tParmEnd)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        [ (tParmEnd)
        | *:
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mTempIndirect)
          | mTempIndirect:
          oTempFree
          ] or >
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         ] or >
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        @OperandPushExpression
         [ (tLiteralInteger)
         | tLiteralInteger:
         oOperandPushInteger
         ] or >
         }
         [ (tParmEnd)
         | *:
         ] or >
         >>
        ;OperandPushExpression
        @OperandForceToStack
         [ oOperandChooseLength (two)
         | two:
         oEmitSingle(iPush)
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mManifest)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         oOperandPushMode(mStack)
         ] or >
         >>
        ;OperandForceToStack
        @OperandPopAndFreeTemp
         [ oOperandChooseMode (mStack)
         | *:
         oOperandPop
         >>
        ;OperandPopAndFreeTemp
        ?tParmEnd (tParmEnd)
        ?tTrap (tTrap)
        oOperandPushTrap
        oEmitSingle(iCall)
        oOperandPop
        oOperandPushMode(mStackReg)
        oOperandSetLength(two)
        oOperandPushMode(mManifest)
        oOperandSetLength(two)
        oOperandSetValue(twelve)
        oEmitDouble(iAdd)
        oOperandPop
        oOperandPop
        >>
       ;WriteParameter
       }
       [ (tWriteEnd)
       | tWriteEnd:
       ] or >
       >>
      ;WriteProc
      ] or >
      }
      [ (tAssignBegin)
      | tAssignBegin:
      @AssignStmt
       oEmitSourceCoordinate
       ?tLiteralAddress (tLiteralAddress)
       @OperandPushVariable
        oOperandPushVariable
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        [ (tLiteralAddress)
        | *:
        >>
       ;OperandPushVariable
       @OperandPushExpressionAssignPopPop
        [ (tLiteralAddress)
        | tLiteralAddress:
        @OperandPushVariable
         oOperandPushVariable
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | *:
         [ (tFetchInteger)
         | tFetchInteger:
         ] or >
         >>
        ;OperandPushVariable
        ] or >
        }
        [ (tLiteralInteger)
        | tLiteralInteger:
        oOperandPushInteger
        ] or >
        }
        [ (tAdd)
        | tAdd:
        [ (tAssignInteger)
        | tAssignInteger:
        @OperandAddAssignPopPopPop
         [ oOperandCompareRightAndDest (no)
         | *:
         oOperandSwap
         [ oOperandCompareRightAndDest (yes)
         | yes:
         oOperandPop
         @OperandAddRightToLeftPop
          [ oOperandChooseManifestValue (one)
          | one:
          oOperandPop
          oEmitSingle(iInc)
          ] or >
          >>
         ;OperandAddRightToLeftPop
         @OperandPopAndFreeTemp
          [ oOperandChooseMode (mStatic)
          | *:
          oOperandPop
          >>
         ;OperandPopAndFreeTemp
         ] or >
         >>
        ;OperandAddAssignPopPopPop
        ] or >
        >>
       ;OperandPushExpressionAssignPopPop
       >>
      ;AssignStmt
      ] or >
      }
      [ (tWhileEnd)
      | *:
      ] or >
      >>
     ;Statements
     ?tWhileEnd (tWhileEnd)
     oEmitUnconditionalBackwardBranch
     oFixPopAddress
     oFixAndFreeShuntList
     oOperandPop
     >>
    ;WhileStmt
    ] or >
    }
    [ (tTrapBegin)
    | tTrapBegin:
    @TrapStmt
     oEmitSourceCoordinate
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      [ (tVarParm)
      | *:
      >>
     ;OperandPushVariable
     oOperandPushCopy
     @OperandForceToStack
      [ oOperandChooseLength (two)
      | two:
      oEmitSingle(iPush)
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushMode(mStack)
      ] or >
      >>
     ;OperandForceToStack
     oOperandPop
     ?tVarParm (tVarParm)
     ?tParmEnd (tParmEnd)
     [ (tTrap)
     | tTrap:
     @OperandPopAndFreeTemp
      [ oOperandChooseMode (mStatic)
      | *:
      oOperandPop
      >>
     ;OperandPopAndFreeTemp
     oOperandPushTrap
     oEmitSingle(iCall)
     oOperandPop
     oOperandPushMode(mStackReg)
     oOperandSetLength(two)
     oOperandPushMode(mManifest)
     oOperandSetLength(two)
     oOperandSetValue(four)
     oEmitDouble(iAdd)
     oOperandPop
     oOperandPop
     ] or >
     ] or >
     >>
    ;TrapStmt
    ] or >
    }
    [ (tAssignBegin)
    | tAssignBegin:
    @AssignStmt
     oEmitSourceCoordinate
     ?tLiteralAddress (tLiteralAddress)
     @OperandPushVariable
      oOperandPushVariable
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      [ (tLiteralAddress)
      | *:
      >>
     ;OperandPushVariable
     @OperandPushExpressionAssignPopPop
      [ (tLiteralAddress)
      | tLiteralAddress:
      @OperandPushVariable
       oOperandPushVariable
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | *:
       [ (tFetchInteger)
       | tFetchInteger:
       ] or >
       >>
      ;OperandPushVariable
      ] or >
      }
      [ (tLiteralInteger)
      | tLiteralInteger:
      oOperandPushInteger
      ] or >
      }
      [ (tAdd)
      | tAdd:
      [ (tAssignInteger)
      | tAssignInteger:
      @OperandAddAssignPopPopPop
       [ oOperandCompareRightAndDest (no)
       | *:
       oOperandSwap
       [ oOperandCompareRightAndDest (yes)
       | yes:
       oOperandPop
       @OperandAddRightToLeftPop
        [ oOperandChooseManifestValue (one)
        | one:
        oOperandPop
        oEmitSingle(iInc)
        ] or >
        >>
       ;OperandAddRightToLeftPop
       @OperandPopAndFreeTemp
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandPop
        >>
       ;OperandPopAndFreeTemp
       ] or >
       >>
      ;OperandAddAssignPopPopPop
      ] or >
      >>
     ;OperandPushExpressionAssignPopPop
     >>
    ;AssignStmt
    ] or >
    }
    [ (tDoBreakIf)
    | *:
    ] or >
    >>
   ;Statements
   ?tDoBreakIf (tDoBreakIf)
   @OperandPushBooleanControlExpression
    @OperandPushExpression
     [ (tLiteralAddress)
     | tLiteralAddress:
     @OperandPushVariable
      oOperandPushVariable
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | *:
      [ (tFetchInteger)
      | tFetchInteger:
      ] or >
      >>
     ;OperandPushVariable
     ] or >
     }
     [ (tLiteralInteger)
     | tLiteralInteger:
     oOperandPushInteger
     ] or >
     }
     [ (tGT)
     | tGT:
     @OperandGreaterPop
      [ oOperandCompareLeftAndRight (no)
      | no:
      [ oOperandChooseManifestValue (trEoln)
      | *:
      oOperandSwap
      [ oOperandChooseManifestValue ()
      | *:
      oOperandSwap
      @EmitCmp
       oOperandSwap
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandSwap
       @OperandLeftOrRightIsTemp
        [ oOperandChooseMode (mManifest)
        | *:
        oOperandSwap
        [ oOperandChooseMode (mStatic)
        | *:
        oOperandSwap
        >>no
       ;OperandLeftOrRightIsTemp
       [@OperandLeftOrRightIsTemp (no)
       | *:
       [ oOperandChooseMode (mManifest)
       | mManifest:
       oEmitDouble(iCmp)
       ] or >
       >>
      ;EmitCmp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mManifest)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      @OperandPopAndFreeTemp
       [ oOperandChooseMode (mStatic)
       | *:
       oOperandPop
       >>
      ;OperandPopAndFreeTemp
      oOperandPushJumpCondition(iJgt)
      ] or >
      >>
     ;OperandGreaterPop
     ] or >
     }
     [ (tDoTest)
     | *:
     ] or >
     >>
    ;OperandPushExpression
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    >>
   ;OperandPushBooleanControlExpression
   ?tDoTest (tDoTest)
   [ oOperandChooseJumpCondition (iJgt)
   | *:
   @OperandInfixOr
    @OperandForceToJumpCondition
     [ oOperandIsJumpCondition (yes)
     | yes:
     ] or >
     >>
    ;OperandForceToJumpCondition
    [ oOperandChooseJumpCondition (iJgt)
    | *:
    oEmitConditionalForwardBranch
    oFixAndFreeFalseBranches
    oFixPushLastAddress
    oOperandMergeShuntsWithAddress
    oFixPopAddress
    >>
   ;OperandInfixOr
   @Statements
    [ (tDoEnd)
    | *:
    ] or >
    >>
   ;Statements
   ?tDoEnd (tDoEnd)
   oEmitUnconditionalBackwardBranch
   oFixAndFreeShuntList
   oFixPopAddress
   oOperandPop
   >>
  ;DoStmt
  ] or >
  }
  [ (tTrapBegin)
  | tTrapBegin:
  @TrapStmt
   oEmitSourceCoordinate
   [ (tTrap)
   | *:
   ?tTrap (tTrap)
   oOperandPushTrap
   oEmitSingle(iCall)
   oOperandPop
   >>
  ;TrapStmt
  ] or >
  }
  [ (tEndOfFile)
  | *:
  ] or >
  >>
 ;Block
 @EmitProgramEpilogue
  oEmitNone(iLeave)
  oEmitNone(iReturn)
  >>
 ;EmitProgramEpilogue
 >>
;Program
