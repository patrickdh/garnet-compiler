% PT Scanner.ssl   Ver. 1.04
%
% Date:  30 Jun 1980
%	(revised 30 Dec 2016)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input :
	lLetter
	firstCharClass = lLetter
	lDigit
	lPlus		'+'
	lMinus		'-'
	lStar		'*'
	lColon		':'
	lEquals		'='
	lDot		'.'
	lComma		','
	lSemicolon	';'
	lQuote		'"'
	lLeftAngle	'<'
	lRightAngle	'>'
	lLeftParen	'('
	lRightParen	')'
	lLeftBracket	'['
	lRightBracket	']'
	lLeftBrace	'{'
	lRightBrace	'}'
	lBlank
	lIllegal
	lNewLine
	lTab
	lNewPage
	lEndFile
	% Changes START
	lPercent	'%'
	lHash	'#'
	lExclamation	'!'
	lQuestion	'?'
	lDollar		'$'
	lastCharClass = lDollar;
	% Changes END

Output :
	% Keyword tokens -
	%   Tokens pDiv through pRepeat are keywords which will be separated
	%   from user defined identifiers by the Screener.  This Scanner
	%   treats them all as identifiers.
	pDiv
	firstKeywordToken = pDiv
	pMod
	pOr
	pAnd
	pThen
	pElse
	pOf
	pEnd
	pDo
	pArray
	pFile
	pPacked
	pVar
	pType
	pIf
	pCase
	pWhile
	% Changes START
	pUsing
	pVal
	pDef
	pUnless
	pElsif
	pBreak
	pWhen
	pModule
	lastKeywordToken = pModule
	% Changes END

	% Scanner tokens -
	%   These are the tokens actually recognized by the Scanner itself.

	% Compound tokens -
	%   These will be sent to the parser with a value or index.
	pIdentifier
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	% Non-compound tokens -
	%   These tokens simply represent themselves.
	pNewLine
	pEndFile
	pPlus
	pMinus
	pStar
	pDot
	pComma
	pSemicolon
	pColon
	pEquals
	pNotEqual
	pLess
	pLessEqual
	pGreaterEqual
	pGreater
	pLeftParen
	pRightParen
	pLeftBracket
	pRightBracket
	pDotDot
	% Changes START
	pNot
	pDoubleEquals
	pQuestion
	pDollar
	pHash
	lastSyntaxToken = pHash;
	% Changes END

Error :
	eIllegalChar = 5
	firstScanError = eIllegalChar
	eLiteralLine
	eLiteralEOF
	eCommentEOF
	eNoSeparator
	lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
	% Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
	{[
	    | lBlank :
	    | lLetter:
		oBufferSave
		@Identifier
	    | lNewLine:
		.pNewLine
	    | lTab:
	    | ';':
		.pSemicolon
	    | '(':
		.pLeftParen
	    | ')':
		.pRightParen
	    | '[':
		.pLeftBracket
	    | ']':
		.pRightBracket
	    | ',':
		.pComma
	    | ':':
		.pColon
		% Colon-equal expansion removed (old PT feature)
	    | lDigit:
		oBufferSave
		@Integer
		[
		    | lLetter:
			#eNoSeparator
			oBufferSave
			@Identifier
		    | *:
		]
	    | '=':
		[
				| '=':
			.pDoubleEquals
				| *:
			.pEquals
		]
	    | '+':
		.pPlus
	    | lQuote:
		@Literal
	    | '-':
		.pMinus
	    | '.':
		[
		    | '.':
			.pDotDot
		    | *:
			.pDot
		]
	    | '<':
		[
		    | '=':
			.pLessEqual
		    | *:
			.pLess
			% NotEquals expansion removed ('<>' old PT feature)
		]
	    | '>':
		[
		    | '=':
			.pGreaterEqual
		    | *:
			.pGreater
		]
		% CHANGES START
			| '%':
		@Comment
	    | '*':
		.pStar
			| '#':
		.pHash
			| '!':
		[
				|'=':
			.pNotEqual
				| *:
			.pNot
		]
			| '?':
		.pQuestion
			| '$':
		.pDollar
		% CHANGES END
	    | lNewPage:
	    | lEndFile:
		.pEndFile
		>
	    | *:
		?
		#eIllegalChar
	]};

Identifier :
	% Assemble an identifier token

	{[
	    | lLetter, lDigit:
		oBufferSave
	    | *:
		.pIdentifier
		>
	]};

Integer :
	% Assemble an integer token

	{[
	    | lDigit:
		oBufferSave
	    | *:
		.pInteger
		>
	]};

Literal :
	% Assemble a literal string token

	{[
	    | lQuote:
		[
		    | lQuote:
			oBufferSave
		    | *:
			.pLiteral
			>
		]
	    | lNewLine:		% literal must not cross a line boundary
		#eLiteralLine
		.pNewLine
		>
	    | lEndFile:		% literal must be closed before EOF
		#eLiteralEOF
		.pEndFile
		>
	    | *:	% literal may contain any other character
		?
		oBufferSave
	]};

% Alternative comment rule has been removed (old PT feature)

Comment :
	% Discard the contents of a comment

	{[
	    | lNewLine:
		.pNewLine
		>
	    | lEndFile:		% comment must be closed before EOF
		#eCommentEOF
		.pEndFile
		>
	    | *:	% comment may contain any other character
		?
	]};

end
